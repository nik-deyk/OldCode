/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.velikiyprikalel.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.velikiyprikalel.model.SystemItemHistoryResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;

@Validated
@RequestMapping("${openapi.yetAnotherDiskOpen.base-path:}")
public interface NodeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /node/{id}/history
     * Получение истории обновлений по элементу за заданный полуинтервал [from, to).
     * История по удаленным элементам недоступна. - размер папки - это суммарный
     * размер всех её элементов - можно получить статистику за всё время.
     *
     * @param id        id элемента для которого будет отображаться история
     *                  (required)
     * @param dateStart Дата и время начала интервала, для которого считается
     *                  история. Дата должна обрабатываться согласно ISO 8601 (такой
     *                  придерживается OpenAPI). Если дата не удовлетворяет данному
     *                  формату, необходимо отвечать 400. (optional)
     * @param dateEnd   Дата и время конца интервала, для которого считается
     *                  история. Дата должна обрабатываться согласно ISO 8601 (такой
     *                  придерживается OpenAPI). Если дата не удовлетворяет данному
     *                  формату, необходимо отвечать 400. (optional)
     * @return История по элементу. (status code 200)
     *         or Некорректный формат запроса или некорректные даты интервала.
     *         (status code 400)
     *         or Элемент не найден. (status code 404)
     */
    @RequestMapping(method = RequestMethod.GET, value = "/node/{id}/history", produces = { "application/json" })
    default ResponseEntity<SystemItemHistoryResponse> nodeIdHistoryGet(
            @PathVariable("id") String id,
            @Valid @RequestParam(value = "dateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateStart,
            @Valid @RequestParam(value = "dateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateEnd) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
